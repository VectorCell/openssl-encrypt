#!/bin/bash

remove="false"
while [[ $# > 0 ]]; do
	key="$1"
	case $key in
		-i)
		inputfile="$2"
		shift # past argument
		;;
		-k|--key)
		publickeypem="$2"
		shift # past argument
		;;
		-o)
		outputfile="$2"
		shift # past argument
		;;
		--rm)
		remove="true"
		;;
		*)
		# unknown option
		;;
	esac
	shift # past argument or value
done

privatekey="$HOME/.ssh/id_rsa"
publickey="$HOME/.ssh/id_rsa.pub"
if [ ! -e "$inputfile" ]; then
	echo "ERROR: $inputfile not found"
	exit 1
fi
if [ -z "$outputfile" ]; then
	outputfile="$inputfile.enc"
	keyfile="$inputfile.key"
else
	keyfile="$outputfile.key"
fi
if [ -e "$keyfile" ]; then
	echo "ERROR: $keyfile already exists"
	exit 1
fi

if [ -z "$publickeypem" ]; then
	publickeypem="$publickey.pem"
fi
if [ ! -e "$publickeypem" ]; then
	echo "generating public key from private key $privatekey ..."
	openssl rsa -in ~/.ssh/id_rsa -pubout > "$publickeypem"
	if [ ! -e "$publickeypem" ]; then
		echo "ERROR: couldn't generate $publickey.pem"
		exit 1
	fi
fi

# generates random 256-bit key
tempkey="/run/shm/tempkey-$RANDOM.bin"
openssl rand -base64 32 > $tempkey

# encrypts the key using the RSA public key
openssl rsautl -encrypt -inkey "$publickeypem" -pubin < $tempkey > "$keyfile"

# encrypts the input file using the generated key
echo "encrypting $inputfile ..."
if [ -n "$(which pv)" ]; then
	openssl enc -aes-256-cbc -salt -in "$inputfile" -pass file:$tempkey \
	| pv -s $(ls -l "$inputfile" | awk '{print $5}') > "$outputfile"
else
	openssl enc -aes-256-cbc -salt -in "$inputfile" -pass file:$tempkey > "$outputfile"
fi
rm $tempkey

if [ "$remove" == "true" ]; then
	echo "removing $inputfile"
	rm "$inputfile"
fi
